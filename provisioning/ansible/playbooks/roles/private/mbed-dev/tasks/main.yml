---
- name: mbed Dev | Install Mercurial
  apt: state=latest pkg=mercurial
  become: yes
  become_method: sudo

- name: mbed Dev | Install GCC Cortex-A/R/M cross compiler
  apt: state=latest pkg=gcc-arm-none-eabi
  become: yes
  become_method: sudo

- name: mbed Dev | Install the ARM mbed CLI
  pip: name=mbed-cli
  become: yes
  become_method: sudo

- name: mbed Dev | Creates a {{ mbed_source_dir }} directory for firmware
  file: path={{ mbed_source_dir }} state=directory

- name: mbed Dev | Clone quickstart client to build our mbed-os application
  git:
    version: 'master'
    accept_hostkey: yes
    force: yes
    repo: "{{ mbed_repo_url }}"
    dest: "{{ mbed_source_dir }}/{{ mbed_repo_name }}"
    update: no

- name: mbed Dev | Update mbed client repo with library dependencies
  shell: /usr/local/bin/mbed update
  args:
    chdir: "{{ mbed_source_dir }}/{{ mbed_repo_name }}"

- name: mbed Dev | Copy ~/.../mbed_cloud_dev_credentials.c from host
  copy:
    src: ~/Downloads/testing/mbedcloud/1.2/production/mbed_cloud_dev_credentials.c
    dest: "{{ mbed_source_dir }}/{{ mbed_repo_name }}"
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_env.USER }}"
    mode: 0664

- name: mbed Dev | Install the mbed manifest tool with PIP
  shell: pip install git+https://github.com/armmbed/manifest-tool-internal.git

- name: mbed Dev | Initialize the manifest tool
  shell: /home/{{ ansible_env.USER }}/.local/bin/manifest-tool init -d "mbed.quickstart.company" -m "FRDM-K64F" -q --force

- name: mbed Dev | Dump manifest data to /vagrant/{{ current_build_time_epoch.stdout }}.FRDM-K64F.LED.qs_manifest_data.json
  shell: jq '. | {"json":.}' .manifest_tool.json | jq ".\"pem\"=\"$(cat .update-certificates/default.key.pem)\"" | jq ".\"der\"=\"$(base64 -w0 .update-certificates/default.der)\"" | sponge "/vagrant/{{ current_build_time_epoch.stdout }}.FRDM-K64F.LED.qs_manifest_data.json"

- name: mbed Dev | Copy update_default_resources.c from manifest dir
  shell: cp /home/{{ ansible_env.USER }}/update_default_resources.c {{ mbed_source_dir }}{{ mbed_repo_name }}

- name: mbed Dev | Change LED blink color to RED in binary
  lineinfile:
    path: "{{ mbed_source_dir }}{{ mbed_repo_name }}/source/platform/mbed-os/setup.cpp"
    regexp: 'DigitalOut[ ]*led\((LED_RED|LED_GREEN|LED_BLUE)\);'
    line: 'DigitalOut led(LED_RED);'
    state: present

- name: mbed Dev | Disable mbed-trace.enable in mbed_app.json
  shell: jq '.target_overrides."*"."mbed-trace.enable" = 0' mbed_app.json | sponge mbed_app.json
  args:
    chdir: "{{ mbed_source_dir }}{{ mbed_repo_name }}"

- name: mbed Dev | Compile RED mbed client FRDM-K64F
  shell: /usr/local/bin/mbed compile -m K64F -t GCC_ARM >> mbed-cli-compile.log
  args:
    chdir: "{{ mbed_source_dir }}{{ mbed_repo_name }}"

# You will end up with a combined bootload + firmware_app binary for the K64F
# that will be copied to /vagrant/{{ current_build_time_epoch.stdout }}.FRDM-K64F.REDLED.ansible.bin
# -s 0 sets the initial time to Unix epoch 1/1/1970 00:00.00
- name: mbed Dev | Combine the bootloader and app to RED.bin
  shell: python combine_bootloader_with_app.py --header-offset 0x20000 --app-offset 0x20400 -b mbed-bootloader-k64f.bin -a ../BUILD/K64F/GCC_ARM/mbed-cloud-client-example-internal.bin -o /vagrant/{{ current_build_time_epoch.stdout }}.FRDM-K64F.REDLED.bootloader.bin
  args:
    chdir: "{{ mbed_source_dir }}{{ mbed_repo_name }}/tools"

- name: mbed Dev | Change LED blink color to GREEN in binary
  lineinfile:
    path: "{{ mbed_source_dir }}{{ mbed_repo_name }}/source/platform/mbed-os/setup.cpp"
    regexp: 'DigitalOut[ ]*led\((LED_RED|LED_GREEN|LED_BLUE)\);'
    line: 'DigitalOut led(LED_GREEN);'
    state: present

- name: mbed Dev | Compile GREEN mbed client FRDM-K64F
  shell: /usr/local/bin/mbed compile -m K64F -t GCC_ARM >> mbed-cli-compile.log
  args:
    chdir: "{{ mbed_source_dir }}{{ mbed_repo_name }}"

- name: mbed Dev | Copy green.bin to /vagrant
  shell: cp {{ mbed_source_dir }}{{ mbed_repo_name }}/BUILD/K64F/GCC_ARM/mbed-cloud-client-example-internal.bin /vagrant/{{ current_build_time_epoch.stdout }}.FRDM-K64F.GREENLED.ansible_update.bin

- name: mbed Dev | Change LED blink color to BLUE in binary
  lineinfile:
    path: "{{ mbed_source_dir }}{{ mbed_repo_name }}/source/platform/mbed-os/setup.cpp"
    regexp: 'DigitalOut[ ]*led\((LED_RED|LED_GREEN|LED_BLUE)\);'
    line: 'DigitalOut led(LED_BLUE);'
    state: present

- name: mbed Dev | Compile BLUE mbed client FRDM-K64F
  shell: /usr/local/bin/mbed compile -m K64F -t GCC_ARM >> mbed-cli-compile.log
  args:
    chdir: "{{ mbed_source_dir }}{{ mbed_repo_name }}"

- name: mbed Dev | Copy blue.bin to /vagrant
  shell: cp {{ mbed_source_dir }}{{ mbed_repo_name }}/BUILD/K64F/GCC_ARM/mbed-cloud-client-example-internal.bin /vagrant/{{ current_build_time_epoch.stdout }}.FRDM-K64F.BLUELED.quickstart_update.bin
